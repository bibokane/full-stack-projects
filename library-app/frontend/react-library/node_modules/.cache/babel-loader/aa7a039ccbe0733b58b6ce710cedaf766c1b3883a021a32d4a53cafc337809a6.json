{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\full-stack\\\\full-stack-projects\\\\library-app\\\\frontend\\\\react-library\\\\src\\\\layouts\\\\ManageLibraryPage\\\\components\\\\AdminMessages.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport AdminMessageRequest from \"../../../models/AdminMessageRequest\";\nimport { Pagination } from \"../../Utils/Pagination\";\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\nimport { AdminMessage } from \"./AdminMessage\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AdminMessages = () => {\n  _s();\n  const {\n    isAuthenticated,\n    getAccessTokenSilently\n  } = useAuth0();\n\n  // Normal Loading Pieces\n  const [isLoadingMessages, setIsLoadingMessages] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n\n  // Messages endpoint State\n  const [messages, setMessages] = useState([]);\n  const [messagesPerPage] = useState(5);\n\n  // Pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  // Recall useEffect\n  const [btnSubmit, setBtnSubmit] = useState(false);\n  useEffect(() => {\n    const fetchUserMessages = async () => {\n      if (isAuthenticated) {\n        const accessToken = await getAccessTokenSilently();\n        const url = `http://localhost:8080/api/messages/search/findByClosed?closed=false&page=${currentPage - 1}&size=${messagesPerPage}`;\n        const requestOptions = {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        };\n        const messagesResponse = await fetch(url, requestOptions);\n        if (!messagesResponse.ok) {\n          throw new Error(\"Something went wrong!\");\n        }\n        const messagesResponseJson = await messagesResponse.json();\n        setMessages(messagesResponseJson._embedded.messages);\n        setTotalPages(messagesResponseJson.page.totalPages);\n      }\n      setIsLoadingMessages(false);\n    };\n    fetchUserMessages().catch(error => {\n      setIsLoadingMessages(false);\n      setHttpError(error.message);\n    });\n    window.scrollTo(0, 0);\n  }, [isAuthenticated, getAccessTokenSilently, currentPage, btnSubmit]);\n  if (isLoadingMessages) {\n    return /*#__PURE__*/_jsxDEV(SpinnerLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container m-5\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n  async function submitResponseToQuestion(id, response) {\n    const url = `http://localhost:8080/api/messages/secure/admin/message`;\n    const accessToken = await getAccessTokenSilently();\n    if (isAuthenticated && id !== null && response !== \"\") {\n      const messageAdminRequestModel = new AdminMessageRequest(id, response);\n      const requestOptions = {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(messageAdminRequestModel)\n      };\n      const messageAdminRequestModelResponse = await fetch(url, requestOptions);\n      if (!messageAdminRequestModelResponse.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      setBtnSubmit(!btnSubmit);\n    }\n  }\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-3\",\n    children: [messages.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Pending Q/A: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), messages.map(message => /*#__PURE__*/_jsxDEV(AdminMessage, {\n        message: message,\n        submitResponseToQuestion: submitResponseToQuestion\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"No pending Q/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), totalPages > 1 && /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminMessages, \"KBG6sKHvn1zbyVKOWM9s3ZZ/z68=\", false, function () {\n  return [useAuth0];\n});\n_c = AdminMessages;\nvar _c;\n$RefreshReg$(_c, \"AdminMessages\");","map":{"version":3,"names":["useEffect","useState","AdminMessageRequest","Pagination","SpinnerLoading","AdminMessage","useAuth0","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminMessages","_s","isAuthenticated","getAccessTokenSilently","isLoadingMessages","setIsLoadingMessages","httpError","setHttpError","messages","setMessages","messagesPerPage","currentPage","setCurrentPage","totalPages","setTotalPages","btnSubmit","setBtnSubmit","fetchUserMessages","accessToken","url","requestOptions","method","headers","Authorization","messagesResponse","fetch","ok","Error","messagesResponseJson","json","_embedded","page","catch","error","message","window","scrollTo","fileName","_jsxFileName","lineNumber","columnNumber","className","children","submitResponseToQuestion","id","response","messageAdminRequestModel","body","JSON","stringify","messageAdminRequestModelResponse","paginate","pageNumber","length","map","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/full-stack/full-stack-projects/library-app/frontend/react-library/src/layouts/ManageLibraryPage/components/AdminMessages.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport AdminMessageRequest from \"../../../models/AdminMessageRequest\";\r\nimport MessageModel from \"../../../models/MessageModel\";\r\nimport { Pagination } from \"../../Utils/Pagination\";\r\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\r\nimport { AdminMessage } from \"./AdminMessage\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nexport const AdminMessages = () => {\r\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0();\r\n\r\n  // Normal Loading Pieces\r\n  const [isLoadingMessages, setIsLoadingMessages] = useState(true);\r\n  const [httpError, setHttpError] = useState(null);\r\n\r\n  // Messages endpoint State\r\n  const [messages, setMessages] = useState<MessageModel[]>([]);\r\n  const [messagesPerPage] = useState(5);\r\n\r\n  // Pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n\r\n  // Recall useEffect\r\n  const [btnSubmit, setBtnSubmit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUserMessages = async () => {\r\n      if (isAuthenticated) {\r\n        const accessToken = await getAccessTokenSilently();\r\n        const url = `http://localhost:8080/api/messages/search/findByClosed?closed=false&page=${\r\n          currentPage - 1\r\n        }&size=${messagesPerPage}`;\r\n        const requestOptions = {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        };\r\n        const messagesResponse = await fetch(url, requestOptions);\r\n        if (!messagesResponse.ok) {\r\n          throw new Error(\"Something went wrong!\");\r\n        }\r\n        const messagesResponseJson = await messagesResponse.json();\r\n\r\n        setMessages(messagesResponseJson._embedded.messages);\r\n        setTotalPages(messagesResponseJson.page.totalPages);\r\n      }\r\n      setIsLoadingMessages(false);\r\n    };\r\n    fetchUserMessages().catch((error: any) => {\r\n      setIsLoadingMessages(false);\r\n      setHttpError(error.message);\r\n    });\r\n    window.scrollTo(0, 0);\r\n  }, [isAuthenticated, getAccessTokenSilently, currentPage, btnSubmit]);\r\n\r\n  if (isLoadingMessages) {\r\n    return <SpinnerLoading />;\r\n  }\r\n\r\n  if (httpError) {\r\n    return (\r\n      <div className=\"container m-5\">\r\n        <p>{httpError}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async function submitResponseToQuestion(id: number, response: string) {\r\n    const url = `http://localhost:8080/api/messages/secure/admin/message`;\r\n    const accessToken = await getAccessTokenSilently();\r\n    if (isAuthenticated && id !== null && response !== \"\") {\r\n      const messageAdminRequestModel: AdminMessageRequest =\r\n        new AdminMessageRequest(id, response);\r\n      const requestOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(messageAdminRequestModel),\r\n      };\r\n\r\n      const messageAdminRequestModelResponse = await fetch(url, requestOptions);\r\n      if (!messageAdminRequestModelResponse.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n      setBtnSubmit(!btnSubmit);\r\n    }\r\n  }\r\n\r\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className=\"mt-3\">\r\n      {messages.length > 0 ? (\r\n        <>\r\n          <h5>Pending Q/A: </h5>\r\n          {messages.map((message) => (\r\n            <AdminMessage\r\n              message={message}\r\n              key={message.id}\r\n              submitResponseToQuestion={submitResponseToQuestion}\r\n            />\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <h5>No pending Q/A</h5>\r\n      )}\r\n      {totalPages > 1 && (\r\n        <Pagination\r\n          currentPage={currentPage}\r\n          totalPages={totalPages}\r\n          paginate={paginate}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}